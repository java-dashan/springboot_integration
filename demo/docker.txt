1.下载docker  yum install docker -y

2.修改镜像源   /etc/docker/daemon.json Docker  (官方中国区  https://registry.docker-cn.com
                                                网易云 http://hub-mirror.c.163.com
                                                阿里云 https://pee6w651.mirror.aliyuncs.com)

            {
                 "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"] #中国科技大学
            }

            临时指定镜像源: docker pull hub.c.163.com/library/zookeeper:latest //网易云

3.docker下载zookeeper / kafka
docker pull  wurstmeister/zookeeper
docker pull  wurstmeister/kafka


4.使用 docker-compose -f docker-compose.yml up -d 命令启动集群服务  (docker-compose command not exist)

    配置yum 镜像源 vim /etc/yum.repos.d
    查看centOS版本 lsb_release -a 或者 cat /etc/redhat-release
    # 配置为阿里镜像源
        wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
    # 设置缓存
        yum makecache
    # 更新镜像配置，可以看到阿里镜像源
        yum -y update

    docker-compose安装
    1.curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
      curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
      更改权限: chmod +x /usr/local/bin/docker-compose
    2.  python方式
        yum -y install epel-release
        yum -y install python-pip
        pip install -i https://pypi.douban.com/simple  --upgrade pip //使用豆瓣镜像升级pip
        pip install -i https://pypi.douban.com/simple docker-compose //使用豆瓣镜像安装

    docker-compose up -f /xxx.xml -d  (后台运行)  如不指定-f则默认使用当前目录下的docker-compose.xml

    出现xxx:Permission denied时
        临时关闭selinux: 1.getenforce 2.setenforce 0  3.getenforce
        永久关闭: vim /etc/sysconfig/selinux  -->SELINUX=enforcing 改为 SELINUX=disabled //然后重启服务器

5.  docker 容器管理

    docker ps -a // 查看所有容器
    docker ps -a -q // 查看所有容器ID
    docker stop $(docker ps -a -q) //  stop停止所有容器
    docker  rm $(docker ps -a -q) //   remove删除所有容器
    docker start containId        //启动容器


6.镜像管理
    删除镜像
        docker rmi [image]
        docker image rm [image]
        docker rmi imageId
    清理镜像残存文件
        docker image prune -a, --all: 删除所有没有用的镜像，而不仅仅是临时文件；-f, --force：强制删除镜像文件，无需弹出提示确认；

7.进入容器
    docker exec -it 容器ID /bin/bash
    ctrl+d 退出容器


8.docker 设置远程访问
    vim /usr/lib/systemd/system/docker.service //添加 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock \
    重启服务
    systemctl daemon‐reload
    systemctl restart docker

9.搭建kafka,zk集群完整实例------------> https://blog.csdn.net/wchyumo2009/article/details/88965053


坑:  1. docker容器内提示Permission denied，这个权限问题怎么解决？
    2. docker启动shell断开连接
        删除br- 开头的网关接口  ------> ifconfig br-*** down
    3.外网访问:
        0.0.0.0:2186->2181/tcp
        通过宿主机IP:2186访问
    4. docker的网络配置https://blog.csdn.net/hetoto/article/details/99892743?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-8-99892743.nonecase
    5. Docker的跨主机网络访问（不同宿主机上的容器之间的通信）https://blog.csdn.net/Rapig1/article/details/102470936

注意:   如果image是通过临时指定镜像拉取的,需带上前缀如: docker pull hub.c.163.com/library/zookeeper:latest --> hub.c.163.com/library/zookeeper
       volumes: -./zookeeper/zoo1/data:/data 可以写相对路径


创建网桥:  docker network create --driver bridge --subnet 172.19.0.0/16 --gateway 172.19.0.1 --opt
                "com.docker.network.bridge.name"="docker1000" nt17219
         --driver 指定驱动
         --subnet 指定网络接口
         --opt    指定参数    bridge.name 是显示再ifconfig上的名称  nt17219 是显示再docker network ls 上的名称

指定网桥的配置文件:
------------------------------------------------------>- "./zooConfig/zoo.cfg:/conf/zoo.cfg" # 指定配置未实践
version: '3.4'

services:
  zoo1:
    image: hub.c.163.com/library/zookeeper
    restart: always
    hostname: zoo1
    container_name: zoo1
    ports:
    - 2184:2181
    volumes:
    - "/usr/local/docker_app/zookeeper/zoo1/data:/data"
    - "/usr/local/docker_app/zookeeper/zoo1/log:/datalog"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      nt17219:
        ipv4_address: 172.19.0.11

  zoo2:
    image: hub.c.163.com/library/zookeeper
    restart: always
    hostname: zoo2
    container_name: zoo2
    ports:
    - 2185:2181
    volumes:
    - "/usr/local/docker_app/zookeeper/zoo2/data:/data"
    - "/usr/local/docker_app/zookeeper/zoo2/log:/datalog"
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888
    networks:
      nt17219:
        ipv4_address: 172.19.0.12

  zoo3:
    image: hub.c.163.com/library/zookeeper
    restart: always
    hostname: zoo3
    container_name: zoo3
    ports:
    - 2186:2181
    volumes:
    - "/usr/local/docker_app/zookeeper/zoo3/data:/data"
    - "/usr/local/docker_app/zookeeper/zoo3/log:/datalog"
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888
    networks:
      nt17219:
        ipv4_address: 172.19.0.13

networks:
  nt17219:
    external:
      name: nt17219




不指定网桥:

version: '3.1'

services:
  zoo1:
    image:  hub.c.163.com/library/zookeeper
    restart: always
    hostname: zoo1
    container_name: zookeeper_1
    ports:
      - 2181:2181
    volumes:
      - /usr/local/docker_app/zookeeper/zoo1/data:/data
      - /usr/local/docker_app/zookeeper/zoo1/datalog:/datalog
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888

  zoo2:
    image:  hub.c.163.com/library/zookeeper
    restart: always
    hostname: zoo2
    container_name: zookeeper_2
    ports:
      - 2182:2181
    volumes:
      - /usr/local/docker_app/zookeeper/zoo2/data:/data
      - /usr/local/docker_app/zookeeper/zoo2/datalog:/datalog
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888

  zoo3:
    image:  hub.c.163.com/library/zookeeper
    restart: always
    hostname: zoo3
    container_name: zookeeper_3
    ports:
      - 2183:2181
    volumes:
      - /usr/local/docker_app/zookeeper/zoo3/data:/data
      - /usr/local/docker_app/zookeeper/zoo3/datalog:/datalog
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888

-------------------------------以下为错误---------------------------------------------------------------->

docker pull zookeeper
docker pull wurstmeister/kafka
docker pull hlebalbau/kafka-manager
在docker-compose.yml同一目录下创建:
mkdir kafka1
mkdir kafka2
mkdir kafka3
mkdir zookeeper1
mkdir zookeeper2
mkdir zookeeper3
在zoo1,zoo2,zoo3中分别创建myid文件，并写入分别写入id数字，如zoo1中的myid中写入1

在zooConfig文件夹下创建zoo.cfg
# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial
# synchronization phase can take
initLimit=10
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=5
# the directory where the snapshot is stored.
# do not use /tmp for storage, /tmp here is just
# example sakes.
dataDir=/data
dataLogDir=/datalog
# the port at which the clients will connect
clientPort=2181
# the maximum number of client connections.
# increase this if you need to handle more clients
#maxClientCnxns=60
#
# Be sure to read the maintenance section of the
# administrator guide before turning on autopurge.
#
# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
#
# The number of snapshots to retain in dataDir
autopurge.snapRetainCount=3
# Purge task interval in hours
# Set to "0" to disable auto purge feature
autopurge.purgeInterval=1
server.1= zoo1:2888:3888
server.2= zoo2:2888:3888
server.3= zoo3:2888:3888

docker network create --driver bridge --subnet 172.23.0.0/25 --gateway 172.23.0.1  zookeeper_network
docker network rm docker_gwbridge

version: '2'

services:

  zoo1:
    image: zookeeper:3.4.14 # 镜像
    restart: always # 重启
    container_name: zoo1
    hostname: zoo1
    ports:
    - "2181:2181"
    volumes:
    - "./zooConfig/zoo.cfg:/conf/zoo.cfg" # 配置
    - "/disk/docker/zookeeper1/data:/data"
    - "/disk/docker/zookeeper1/datalog:/datalog"
    environment:
      ZOO_MY_ID: 1 # id
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      default:
        ipv4_address: 172.23.0.11

  zoo2:
    image: zookeeper:3.4.14
    restart: always
    container_name: zoo2
    hostname: zoo2
    ports:
    - "2182:2181"
    volumes:
    - "./zooConfig/zoo.cfg:/conf/zoo.cfg"
    - "/disk/docker/zookeeper2/data:/data"
    - "/disk/docker/zookeeper2/datalog:/datalog"
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      default:
        ipv4_address: 172.23.0.12

  zoo3:
    image: zookeeper:3.4.14
    restart: always
    container_name: zoo3
    hostname: zoo3
    ports:
    - "2183:2181"
    volumes:
    - "./zooConfig/zoo.cfg:/conf/zoo.cfg"
    - "/disk/docker/zookeeper3/data:/data"
    - "/disk/docker/zookeeper3/datalog:/datalog"
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    networks:
      default:
        ipv4_address: 172.23.0.13

  kafka1:
    image: wurstmeister/kafka:2.12-2.0.1 # 镜像
    restart: always
    container_name: kafka1
    hostname: kafka1
    ports:
    - 9092:9092
    - 9999:9999
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.18.255.9:9092 # 暴露在外的地址
      KAFKA_ADVERTISED_HOST_NAME: kafka1 #
      KAFKA_HOST_NAME: kafka1
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
      KAFKA_ADVERTISED_PORT: 9092 # 暴露在外的端口
      KAFKA_BROKER_ID: 0 #
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      JMX_PORT: 9999 # jmx
    volumes:
    - /etc/localtime:/etc/localtime
    - "/disk/docker/kafka1/logs:/kafka"
    links:
    - zoo1
    - zoo2
    - zoo3
    networks:
      default:
        ipv4_address: 172.23.0.14

  kafka2:
    image: wurstmeister/kafka:2.12-2.0.1
    restart: always
    container_name: kafka2
    hostname: kafka2
    ports:
    - 9093:9092
    - 9998:9999
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.18.255.9:9093
      KAFKA_ADVERTISED_HOST_NAME: kafka2
      KAFKA_HOST_NAME: kafka2
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
      KAFKA_ADVERTISED_PORT: 9093
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      JMX_PORT: 9999
    volumes:
    - /etc/localtime:/etc/localtime
    - "/disk/docker/kafka2/logs:/kafka"
    links:
    - zoo1
    - zoo2
    - zoo3
    networks:
      default:
        ipv4_address: 172.23.0.15

  kafka3:
    image: wurstmeister/kafka:2.12-2.0.1
    restart: always
    container_name: kafka3
    hostname: kafka3
    ports:
    - 9094:9092
    - 9997:9999
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.18.255.9:9094
      KAFKA_ADVERTISED_HOST_NAME: kafka3
      KAFKA_HOST_NAME: kafka3
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
      KAFKA_ADVERTISED_PORT: 9094
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      JMX_PORT: 9999
    volumes:
    - /etc/localtime:/etc/localtime
    - "/disk/docker/kafka3/logs:/kafka"
    links:
    - zoo1
    - zoo2
    - zoo3
    networks:
      default:
        ipv4_address: 172.23.0.16

  kafka-manager:
    image: hlebalbau/kafka-manager:1.3.3.22
    restart: always
    container_name: kafka-manager
    hostname: kafka-manager
    ports:
    - 9000:9000
    links:
    - kafka1
    - kafka2
    - kafka3
    - zoo1
    - zoo2
    - zoo3
    environment:
      ZK_HOSTS: zoo1:2181,zoo2:2181,zoo3:2181
      KAFKA_BROKERS: kafka1:9092,kafka2:9093,kafka3:9094
      APPLICATION_SECRET: letmein
      KAFKA_MANAGER_AUTH_ENABLED: "true" # 开启验证
      KAFKA_MANAGER_USERNAME: "admin" # 用户名
      KAFKA_MANAGER_PASSWORD: "admin" # 密码
      KM_ARGS: -Djava.net.preferIPv4Stack=true
    networks:
      default:
        ipv4_address: 172.23.0.10

networks:
  default:
    external:
      name: zookeeper_network


-----------------------------------kafka集群最终版----------------------------------------------
docker pull zookeeper
docker pull wurstmeister/kafka
docker pull hlebalbau/kafka-manager

>>> zk_kafka.yml








